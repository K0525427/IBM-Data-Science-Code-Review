import pandas as pd
import dash
from dash import html 
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

spacex_df = pd.read_csv('spacex_launch_dash.csv')
max_payload = spacex_df['Payload Mass (Kg)'].max()
min_payload = spacex_df['Payload Mass (Kg)'].min()

app = dash.Dash(__name__)

app.layout = html.Div(children=[html.H1('Space X Launch Records Dashboard', 
                                         style={'textAlign': 'center', 'color': '#503D36',
                                        'font-size': 40})
                                dcc.Dropdown(id='site-dropdown',
                                            options=[
                                                        {'label': 'All Sites', 'value': 'ALL'},
                                                        {'label': 'CCAFS LC-40', 'value': 'CCAFS LC 40'},
                                                        {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                                                        {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                                        {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
                                                    ],
                                            value='ALL',
                                            placeholder="Select a Launch Site Here",
                                            searchable=True),
                                html.Br(),
                                html.Div(dcc.Graph(id = 'success-pie-chart')),
                                html.Br(),
                                html.P("Payload Range (Kg):"),
                                dcc.RangeSlider(id='payload-slider',
                                                min=0, max=10000, step=1000,
                                                marks={0: '0', 100: '100'},
                                                value=[min_payload, max_payload]),
                                html.Div(dcc.Graph(id = 'success-payload-scatter-chart')),
                        ])

@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value'))

def build_graph(selected_site):
    if selected_site == 'ALL':
        pie_chart = px.pie(spacex_df, names='Launch Site', values='class', title='Total Success Launches by Site')
        return pie_chart
    else:
        filtered_df = spacex_df[spacex_df['Launch Site']==selected_site]
        pie_chart = px.pie(filtered_df, names='class', title = 'Selected Total Success Launches by Site')
        return pie_chart

@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
    Input(component_id='payload-slider', component_property='value')])

def update_graph(selected_site, selected_payload_range):
    if selected_site == 'ALL':
        filtered_df = spacex_df
        [(spacex_df['Payload Mass (Kg)']>= selected_payload_range[0])&
        (spacex_df['Payload Mass (Kg)']<= selected_payload_range[1])]
        scatter_plot = px.scatter(filtered_df, x = 'Payload Mass (Kg)', y = 'class')
        return scatter_plot
    else:
        filtered_df_2 = spacex_df.loc[spacex_df['Launch Site']==selected_site]
        filtered_df_3 = 
        [(filtered_df_2['Payload Mass (Kg)']>= selected_payload_range[0])&
        (filtered_df_2['Payload Mass (Kg)']<= selected_payload_range[1])&
        (filtered_df_2['Launch Site']==selected_site)]
        scatter_plot = px.scatter(filtered_df, x = 'Payload Mass (Kg)', y = 'class'
        labels={'Payload Mass (Kg)': 'Payload Mass (Kg)', 'class': 'Launch Outcome'}  
        title='Total Success Launches by Site')
        return scatter_plot

if __name__ == '__main__':
    app.run_server()
